# fastlane_require 'dotenv'
# fastlane_require 'spaceship'
# fastlane_require 'time'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_number
  ENV['VERSIONCODE'] ||= increment_build_number

  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "180"
  ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "180"

  ENV['BUILD_DIRECTORY'] = "./build/#{ENV['VERSIONNAME']}_#{ENV['VERSIONCODE']}"

  changelog = ""

  changelog_unrelease = read_changelog(
    changelog_path: './CHANGELOG.md', # Specify path to CHANGELOG.md
    section_identifier: '[Unreleased]', # Specify what section to read
    excluded_markdown_elements: ['-', '###']  # Specify which markdown elements should be excluded
  )
  changelog_unrelease = changelog_unrelease.strip

  if changelog_unrelease.length > 0 
    changelog = changelog_unrelease
  else
    previous = ENV['GIT_PREVIOUS_SUCCESSFUL_COMMIT']
    current = ENV['GIT_COMMIT']
    puts "PREVIOUS_SUCCESSFUL_COMMIT: " + previous
    puts "GIT_COMMIT: " + current
  
    if previous != nil and current != nil 
      hash_range = previous + "..." + current
      changelog = sh("git log --pretty='%B%n' #{hash_range} --no-merges")
      changelog_arr = changelog.split("\n")
      result = []
      for item in changelog_arr do
        item_strip = item.strip
        if item_strip.length > 0
          markdown_link = item_strip.match(/^\[.*\]\(.*\)$/)
          if markdown_link != nil 
            result.push("#{item_strip}")
          elsif item_strip.downcase.include? "[ci build]"
              item_strip = item_strip.gsub(/\[ci build\]/i, "")
              result.push("#{item_strip}")
          end
        end
      end
      changelog = result.join("\n")
    else 
      changelog = "Fixed some bugs.."
    end
  end

  puts "changelog with [ci build]: " + changelog

  ENV['CHANGELOG'] = changelog
  ENV['IOS_GROUP'] = 'https://open.feishu.cn/open-apis/bot/v2/hook/2b666371-e2b8-464b-a19a-19de6a8b1631'
  ENV['PROJECT_GROUP'] = 'https://open.feishu.cn/open-apis/bot/v2/hook/e48b50e0-9616-4406-83b9-6785d2c07940'

  title = "#{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']}) BUILD START"
  subTitle = "branch: #{ENV["GIT_BRANCH"]}"
  contents = changelog
  sendDeveloperMessage(
    {
      "title": title,
      "subTitle": subTitle,
      "contents": contents}
    )
end

before_each do |lane, options|
  # ...
end

lane :do_appfile_init do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build(),
      Actions::BindParamBuilder.new(:fetch_app_identifier).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_apple_id).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_team_name).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_itc_team_name).default_value(true).build()
    ]
  )
  bind_params = []
  app_identifier = nil
  if options[:fetch_app_identifier] == true
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    bind_params.push(Actions::BindParamBuilder.new("App identifier").lane_context(:APPFILE_APP_IDENTIFIER).default_value(app_identifier).required().build())
  end
  if options[:fetch_apple_id] == true
    bind_params.push(Actions::BindParamBuilder.new("Apple ID").lane_context(:APPFILE_APPLE_ID).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)).build())
  end
  if options[:fetch_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("Team name").lane_context(:APPFILE_TEAM_NAME).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:team_name)).build())
  end
  if options[:fetch_itc_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("iTunes Connect Team name").lane_context(:APPFILE_ITC_TEAM_NAME).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name)).build())
  end
  user_validation(bind_params: bind_params)
  if app_identifier != Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    project_info = get_project_info(xcodeproj: options[:xcodeproj])
    update_app_identifier(
      app_identifier: Actions.lane_context[:APPFILE_APP_IDENTIFIER],
      xcodeproj: project_info[:xcodeproj],
      plist_path: project_info[:info_plist]
    )
  end
  app_file_data = ""
  if app_identifier = Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    app_file_data += "app_identifier \"#{app_identifier}\" # The bundle identifier of your app\n"
  end
  if apple_id = Actions.lane_context[:APPFILE_APPLE_ID]
    app_file_data += "apple_id \"#{apple_id}\" # Your Apple email address\n"
  end
  if team_name = Actions.lane_context[:APPFILE_TEAM_NAME]
    app_file_data += "team_name \"#{team_name}\"\n"
  end
  if itc_team_name = Actions.lane_context[:APPFILE_ITC_TEAM_NAME]
    app_file_data += "itc_team_name \"#{itc_team_name}\"\n"
  end
  File.open("Appfile", "w") { |file|
    file.puts(app_file_data)
  }
end

lane :do_update_cocoapods do |lane, options|
  if files_matching(pattern: "Podfile") != nil

    wechatwork(
      title: "",
      subTitle: "POD INSTALLING",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )
   
    cocoapods(
      repo_update: true,
      silent: false,
      verbose: true,
      use_bundle_exec: true,
      podfile: './Podfile',
      try_repo_update_on_error: true,
      error_callback: lambda { |result|
        cocoapods(
          repo_update: true,
          silent: false,
          verbose: true,
          use_bundle_exec: true,
          podfile: './Podfile',
          error_callback: lambda { |result|	
            
            wechatwork(
              title: "",
              subTitle: "❌ POD INSTALL FAILED",
              contents: "",
              webhook: ENV['IOS_GROUP'],
              mentioned_mobile_list: []
            )

          }
        )
      }
    )

    wechatwork(
      title: "",
      subTitle: "✅ POD INSTALL SUCCEED",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )

  end
end

lane :do_run_tests do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:test_scheme).env_var("TEST_SCHEME").ci_required().build(),
      Actions::BindParamBuilder.new(:xcworkspace).env_var("XCWORKSPACE").build(),
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build()
    ]
  )
  do_update_cocoapods
  scan(
    workspace: options[:xcworkspace],
    project: options[:xcodeproj],
    scheme: options[:test_scheme],
    clean: true
  )
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |lane, options|
  do_publish
end

desc "Change jira issue."
lane :do_jira_issue do |options|
  begin
    jirastatus(
      log: ENV['CHANGELOG']
    )

    wechatwork(
      title: "",
      subTitle: "✅ auto jira status succeed",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )
  rescue => ex
    UI.error("Something went wrong with jira status: #{ex}")
  end
end

lane :do_publish do |lane, options|
  begin
    do_update_cocoapods

    wechatwork(
      title: "",
      subTitle: "MATCHING",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )

    match

    wechatwork(
      title: "",
      subTitle: "✅ MATCH SUCCEED",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )

    wechatwork(
      title: "",
      subTitle: "BUILDING",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )

    ENV['DELIVER_IPA_PATH']=gym(
      export_options: {
        compileBitcode: true,
        stripSwiftSymbols: true,
        uploadBitcode: false,
        uploadSymbols: false,
        thinning: "<none>",
        iCloudContainerEnvironment: "Production"
      },
      output_directory: "#{ENV['BUILD_DIRECTORY']}/IPA",
      archive_path: "#{ENV['BUILD_DIRECTORY']}/Archives/archive",
      derived_data_path: "#{ENV['BUILD_DIRECTORY']}/DerivedData",
      buildlog_path: "#{ENV['BUILD_DIRECTORY']}/logs",

    )

    wechatwork(
      title: "",
      subTitle: "BUILD SUCCEED",
      contents: "",
      webhook: ENV['IOS_GROUP'],
      mentioned_mobile_list: []
    )

    wechatwork(
      webhook: ENV['IOS_GROUP'],
      markdown: "**SYMBOLS UPLOADING**",
      mentioned_mobile_list: []
    )
    upload_symbols_to_crashlytics(
      dsym_path: "#{ENV['BUILD_DIRECTORY']}/IPA/HelloTalk_Binary.app.dSYM.zip",
      gsp_path: "./HelloTalk_Binary/Resources/Plist/GoogleService-Info.plist"
    )
    wechatwork(
      webhook: ENV['IOS_GROUP'],
      markdown: "✅**SYMBOLS UPLOADED",
      mentioned_mobile_list: []
    )

    do_upload_firim

    do_jira_issue
    
    rescue => e
      wechatwork(
        webhook: ENV['IOS_GROUP'],
        markdown: "❌**Build failed**",
        mentioned_mobile_list: []
    )
    puts e
    UI.error e
    UI.user_error!("Whoops, something went wrong")
  end
end

lane :do_upload_firim do |lane, options|
  begin
    change_log = "[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    
    puts "firim_changlog: #{change_log}"
    
    wechatwork(
      webhook: ENV['IOS_GROUP'],
      markdown: "**UPLOADING TO FIR**",
      mentioned_mobile_list: []
    )
    
    firim(
      app_version: ENV['VERSIONNAME'],
      app_build_version: ENV['VERSIONCODE'],
      app_changelog: change_log
    )

    pgyer(
      api_key: "c9c82e19cdbb6a3c97348d0cae754c2e",
      user_key: "c61b93206310e40f5868c36b9777c7ab",
      update_description: change_log
    )

    # send_e_mail(
    #   stmp_server: "smtp.exmail.qq.com",
    #   user_name: "update@hellotalk.com",
    #   password: "Hello123",
    #   subject: "default",
    #   message_body: "Hi! @issenn \r\n A new app upload success \r\n#{ENV['CHANGELOG']}"
    # )

    wechatwork(
      webhook: ENV['IOS_GROUP'],
      markdown: "✅**UPLOAD TO FIR SUCCEED**",
      mentioned_mobile_list: []
    )
    
    branch_name = ENV["GIT_BRANCH"]
    if branch_name.downcase.include? "jenkins"
      puts "build end in ci branch: #{branch_name}"
    else
      wechatwork(
        webhook: ENV['PROJECT_GROUP'],
        markdown: "**HelloTalk(iOS) #{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']})** \r\n\n  #{ENV['CHANGELOG']}",
        mentioned_mobile_list: ["15986673013", "18779144521", "18126009603"]
      )
    end
    
    commit_version_bump(
    message: "#{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']})"
    )
 
    git_remote = sh("git remote")
    if !git_remote.include? "Bitbucket"
      sh("git remote add Bitbucket ssh://git@git.hellotalk8.com:7999/ios/ht_binary_ios.git")
    end

    sh("git pull Bitbucket #{ENV["GIT_BRANCH"]}")
    push_to_git_remote(
      remote: "Bitbucket",         # optional, default: "origin"
      local_branch: ENV["GIT_BRANCH"],  # optional, aliased by "branch", default is set to current branch
      remote_branch: ENV["GIT_BRANCH"], # optional, default is set to local_branch
      tags: false
    )
    
    wechatwork(
      webhook: ENV['IOS_GROUP'],
      markdown: "✅**increment build number and pushed**",
      mentioned_mobile_list: []
    )
    
    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      # raise ex
      wechatwork(
        webhook: ENV['IOS_GROUP'],
        markdown: "❌**UPLOAD TO FIR FAILED",
        mentioned_mobile_list: []
      )
      puts ex
    end
  end
end

lane :do_lookup_cert_id do |lane, options|
  require 'spaceship'
  Spaceship.login('issenn@hellotalk.com')
  Spaceship.select_team
  Spaceship.certificate.all.each do |cert|
    cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split("::")[-1]
    puts "Cert id: #{cert.id}, name: #{cert.name}, expires: #{cert.expires.strftime("%Y-%m-%d")}, type: #{cert_type}"
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
   wechatwork(
    webhook: ENV['IOS_GROUP'],
    markdown: "**BUILD END**",
    mentioned_mobile_list: []
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end

lane :sendDeveloperMessage do |options|
  title = options[:title]
  if title.nil? 
    title = ""
  end

  subTitle = options[:subTitle]
  if subTitle.nil
    subTitle = ""
  end

  contents = options[:contents]
  if contents.nil? 
    subTitle = ""
  end

  puts("44444444444")
  puts(options)

  wechatwork(
    title: title,
    subTitle: subTitle,
    contents: contents,
    webhook: ENV['IOS_GROUP'],
    mentioned_mobile_list: []
  )
end

lane :sendProjectMessage do |options|
  title = options[:title]
  subTitle = options[:subTitle]
  contents = options[:contents]

  puts(options)

  wechatwork(
    title: title,
    subTitle: subTitle,
    contents: contents,
    webhook: ENV['PROJECT_GROUP'],
    mentioned_mobile_list: []
  )
end